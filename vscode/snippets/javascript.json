{
	/*
	// Place your snippets for JS here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	// 	"Print to console": {
	// 		"prefix": "cl",
	// 		"body": [
	// 			"console.log($1)"
	// 		],
	// 		"description": "Log output to console"
	// 	}
	"HyperHTML Component": {
		"prefix": "hypercomp",
		"body": [
			"import { Component } from \"hyperhtml/esm\";",
			"",
			"export class $1Component extends Component<{}> {",
			"    constructor() {",
			"        super();",
			"    }",
			"    public render() {",
			"        return this.html`$2`;",
			"    }",
			"}"
		]
	},
	"String transformation function": {
		"prefix": "stringtr",
		"body": [
			"/**",
			"* $2",
			"*/",
			"export const $1 = (input) => {",
			"  return input$3",
			"}"
		]
	},
	"String transformation spec": {
		"prefix": "stringtrspec",
		"body": [
			"import { $1 } from '../esm/$1.js'",
			"",
			"describe('$1', () => {",
			"  it('should', () => {",
			"    const input = ''",
			"    const expected = ''",
			"    expect($1(input)).toBe(expected)",
			"  })",
			"})"
		]
	}
}