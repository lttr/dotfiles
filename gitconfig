#            _   _                             __   _
#     __ _  (_) | |_    ___    ___    _ __    / _| (_)   __ _
#    / _` | | | | __|  / __|  / _ \  | '_ \  | |_  | |  / _` |
#   | (_| | | | | |_  | (__  | (_) | | | | | |  _| | | | (_| |
#    \__, | |_|  \__|  \___|  \___/  |_| |_| |_|   |_|  \__, |
#    |___/                                              |___/
#

[user]
    name = Lukas Trumm
    email = lukas.trumm@centrum.cz

[alias]
    # add
    a = add
    aa = add --all
    unstage = reset --
    # branch
    br = branch
    bra = branch -a
    co = checkout
    # commit
    can = commit --amend --no-edit  # add staged to last commit (into 'can')
    ci = commit
    cm = commit -m
    ca = commit -a -m   # commit all changes in tracked files
    # config
    aliases = config --global --includes --get-regexp alias
    cg = config --global --includes
    # diff
    d = diff            # changes not staged yet
    ds = diff --staged  # what is already staged in the index
    dh = diff HEAD      # all changes from last commit
    # merging and rebasing
    edit-conflicts = "!f() { git status -s | grep '^UU' | awk '{print $2}'; }; $EDITOR `f`"
    re = rebase
    rec = rebase --continue

    # files
    changed = update-index --no-assume-unchanged
    unchanged = update-index --assume-unchanged
    listunchanged = !git ls-files -v | grep "^[[:lower:]]"
    ignored = ls-files --other --ignored --exclude-standard

    # log
    # l (Log simply)
    # la (Log simply All commits)
    # le (Log Every branch simply)
    # lea (Log Every branch simply All commits)
    # lmy (Log MY last commits simply)
    # m (More info log)
    # ma (More info log All commits)
    # me (More info log Every branch)
    # mea (More info log Every branch All commits)

    l = log --graph --decorate --oneline -n20
    la = log --graph --decorate --oneline
    le = log --graph --decorate --oneline --all -n20
    lea = log --graph --decorate --oneline --all
    lmy = log --graph --decorate --oneline --all -n20 --author=\"Lukas Trumm\"
    m = !"git logformat -n20"
    ma = !"git logformat"
    me = !"git logformat --all -n20"
    mea = !"git logformat --all"
    lf = !"gitlogformat -n8 --name-status"
    h = !"git logformat --all --follow" # history of a file

    logbr = !"git branchesformat" refs/heads
    logrbr = !"git branchesformat" refs/remotes/origin

    logformat = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(cyan)%ci%x08%x08%x08%x08%x08%x08%x08%x08%x08%C(reset) %s %C(green)(%an)%C(reset)%C(bold green)%d%C(reset)'
    branches = for-each-ref --sort=-committerdate --format='%(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset)) %(color:red)%(objectname:short)%(color:reset) %(contents:subject) (%(authorname))' refs/heads refs/remotes
    tags = for-each-ref --sort=-taggerdate --format='%(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(taggerdate)%(color:reset)) %(color:red)%(objectname:short)%(color:reset) %(contents:subject) (%(taggername))' refs/tags

    rf = reflog

    sf = show --name-status
    find = log --all --name-status --grep
    # remote
    fe = fetch
    fem = fetch origin master:master
    update = !git stash save -u && git pull && git stash pop
    # status
    st = status
    s = status -s
    # stash
    sl = stash list

[color]
    diff = auto
    status = auto
    branch = auto

[core]
    autocrlf = input
    eol = lf
    pager = less -FRX

[credential]
    helper = gnome-keyring

[merge]
    tool = fugitive
    conflictstyle = diff3

[mergetool "fugitive"]
    cmd = vim -f -c \"Gdiff\" \"$MERGED\"

[pull]
    rebase = true

[push]
    default = simple

[include]
    path = .gitconfig.local

